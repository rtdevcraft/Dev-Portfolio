// src/index.ts
import {createFilter} from "@rollup/pluginutils";
import * as changeCase from "change-case";
import {init, parse} from "es-module-lexer";
import MagicString from "magic-string";
import path from "path";
import {normalizePath} from "vite";
var src_default = (options) => {
  const {
    include = ["**/*.vue", "**/*.ts", "**/*.js", "**/*.tsx", "**/*.jsx"],
    exclude = "node_modules/**",
    libs = []
  } = options;
  const filter = createFilter(include, exclude);
  return {
    name: "vite:style-import",
    async transform(code, id) {
      if (!filter(id) || !needTransform(code, libs))
        return code;
      if (!code) {
        return code;
      }
      await init;
      let imports = [];
      try {
        imports = parse(code)[0];
      } catch (e) {
        console.log(e);
      }
      if (!imports.length) {
        return code;
      }
      let s;
      const str = () => s || (s = new MagicString(code));
      for (let index = 0; index < imports.length; index++) {
        const {s: start, e: end, se, ss} = imports[index];
        const name = code.slice(start, end);
        if (!name) {
          continue;
        }
        const lib = getLib(name, libs);
        if (!lib) {
          continue;
        }
        const importStr = code.slice(ss, se);
        const exportVariables = transformImportVar(importStr);
        const importStrList = transformLibCss(lib, exportVariables);
        str().prepend(importStrList.join(""));
      }
      return {
        code: str().toString()
      };
    }
  };
};
function transformLibCss(lib, exportVariables) {
  const {libraryName, resolveStyle, esModule, libraryNameChangeCase = "paramCase"} = lib;
  if (!resolveStyle || typeof resolveStyle !== "function" || !libraryName) {
    return [];
  }
  const set = new Set();
  for (let index = 0; index < exportVariables.length; index++) {
    const name = getChangeCaseFileName(exportVariables[index], libraryNameChangeCase);
    let importStr = resolveStyle(name);
    if (esModule) {
      importStr = resolveNodeModules(importStr);
    }
    set.add(`import '${importStr}';`);
  }
  return Array.from(set);
}
function transformImportVar(importStr) {
  if (!importStr) {
    return [];
  }
  const exportStr = importStr.replace("import", "export").replace(/\s+as\s+\w+,?/g, ",");
  let exportVariables = [];
  try {
    exportVariables = parse(exportStr)[1];
  } catch (error) {
    console.error(error);
  }
  return exportVariables;
}
function getLib(libraryName, libs) {
  return libs.find((item) => item.libraryName === libraryName);
}
function getChangeCaseFileName(importedName, libraryNameChangeCase) {
  try {
    return changeCase[libraryNameChangeCase](importedName);
  } catch (error) {
    return importedName;
  }
}
function needTransform(code, libs) {
  return !libs.every(({libraryName}) => {
    return !new RegExp(`('${libraryName}')|("${libraryName}")`).test(code);
  });
}
function resolveNodeModules(...dir) {
  return normalizePath(path.join(process.cwd(), "node_modules", ...dir));
}
export {
  src_default as default
};
